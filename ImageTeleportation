from projectq.ops import All, CNOT, H, Measure, X, Z
from projectq import MainEngine
import matplotlib.pyplot as plt
import cv2
import numpy as np
from PIL import Image


def create_bell_pair(quantum_engine):
    # Qubit one is 'Alices' qubit, and will be used to create a message state
    qubit_one = quantum_engine.allocate_qubit()
    # Qubit two is 'Bobs' qubit, and will be used to re-create the message state
    qubit_two = quantum_engine.allocate_qubit()
    ''' 
    Hadamard gate to put Qubit one in superposition
    This sets the value of a equal probability of being 1 or 0
    '''
    H | qubit_one

    '''
    CNOT gate to flip the second Qubit conditonally
    on the first qubit being in the state |1‚ü©
    '''
    CNOT | (qubit_one, qubit_two)

    return qubit_one, qubit_two


def create_message(quantum_engine='', qubit_one='', message_value=0):
    qubit_to_send = quantum_engine.allocate_qubit()
    if message_value == 1:
        '''
        setting the qubit to positive if message_value is 1
        by flipping the base state with a Pauli-X gate.
        '''
        X | qubit_to_send

    # entangle the original qubit with the message qubit
    CNOT | (qubit_to_send, qubit_one)

    '''
    1 - Put the message qubit in superposition 
    2 - Measure out the two values to get the classical bit value
        by collapsing the state. 
    '''
    H | qubit_to_send
    Measure | qubit_to_send
    Measure | qubit_one

    # The qubits are now turned into normal bits we can send through classical channels
    classical_encoded_message = [int(qubit_to_send), int(qubit_one)]

    return classical_encoded_message

def message_reciever(quantum_engine, message, qubit_two):
    '''
    Pauli-X and/or Pauli-Z gates are applied to the Qubit,
    conditionally on the values in the message.
    '''
    if message[1] == 1:
        X | qubit_two
    if message[0] == 1:
        Z | qubit_two

    '''
    Measuring the Qubit and collapsing the state down to either 1 or 0
    '''
    Measure | qubit_two

    quantum_engine.flush()

    received_bit = int(qubit_two)
    return received_bit


def send_receive(bit=0,quantum_engine=''):
    # Create bell pair
    qubit_one, qubit_two = create_bell_pair(quantum_engine)
    # entangle the bit with the first qubit
    classical_encoded_message = create_message(quantum_engine=quantum_engine, qubit_one=qubit_one, message_value=bit)
    # Teleport the bit and return it back
    return message_reciever(quantum_engine, classical_encoded_message, qubit_two)


def send_full_message(message='Animesh',quantum_engine=''):
    img_bgr = cv2.imread(message)
    img = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)
    img_list = []
    img_list_m = []

    reshape_val = int((np.shape(img)[0]) * (np.shape(img)[1]) * (np.shape(img)[2]))
    img_list = img.flatten().reshape(reshape_val)

    binary_encoded_message = [bin(int(x))[2:].zfill(8) for x in img_list]
    print('Binary message to send: ', binary_encoded_message)

    received_bytes_list = []
    for letter in binary_encoded_message:
        received_bits = ''
        for bit in letter:
            received_bits = received_bits + str(send_receive(int(bit),quantum_engine))
        received_bytes_list.append(received_bits)

    received_int_list = [int(x, 2) for x in received_bytes_list]

    img_list = np.array(received_int_list)
    org_img_list = img_list.reshape(np.shape(img))

    print('Received Binary message: ', received_bytes_list)

    fig, axs = plt.subplots(1, 2)
    axs[0].imshow(img)
    axs[0].set_title("Sender image")
    axs[1].imshow(org_img_list)
    axs[1].set_title("Receiver image")

    plt.show()

# Using the simulator as quantum engine
quantum_engine=MainEngine()

img = str(input("Enter the image name: "))

send_full_message(message=img,quantum_engine=quantum_engine )
